body {
  --color-accent: thistle;
  /* thistle colors, since relative color syntax is not so well supported yet */
  --thistle-light: oklch(83.33% 0.044 325.96 / 0.4);
  /* this needs to be solid color so I can use it as overlapping background */
  @supports (oklch(from thistle, l c h / 0.8)) {
    --color-accent-light: oklch(from var(--color-accent), l c h / 0.4);
  }
  --thistle-dark: oklch(28.53% 0.128 348.72);
  ::selection {
    background-color: var(--color-accent);
    color: var(--color-black);
  }
}

main {
  padding-block: var(--space-s-m);
}

main *:not(blockquote, figure, h2, h3) + :is(h2, h3) {
  margin-block-start: var(--space-s);
}

blockquote {
  &::before {
    color: var(--thistle-dark);
  }
}

figure {
  margin-block: var(--space-s);
}

main :is(h2, h3) {
  line-height: 1;
}

main :is(h2, h3) a {
  font-weight: inherit;
}

main h2 {
  font-size: var(--font-step-2);
}

main h3 {
  font-size: var(--font-base);
  font-variation-settings: "SOFT" 100;
  font-weight: 400;
  text-transform: uppercase;
}

/* todo: refactor for main nesting */
main > p:first-child {
  font-size: var(--font-step-1);
  line-height: 1.4;
}

main > p:first-child::first-line {
  font-variant-caps: petite-caps;
  font-weight: 700;
}

@media screen and (width > 37.5rem) {
  main > p:first-child::first-letter {
    float: left;
    /* logical properties don't seem to work here */
    /* chrome not recognizing font step definition */
    margin-left: calc(-0.33 * var(--font-step-5));
    margin-top: 0.125em;
    font-size: var(--font-step-5);
    letter-spacing: 0.05em;
    line-height: 1;
  }
}

@media screen and (width > 56rem) {
  main > p:first-child {
    line-height: unset;
  }

  main > p:first-child::first-letter {
    margin-top: unset;
  }
}

:root {
  --title-stack-index: 1;
}

header {
  height: calc(3 * var(--font-step-5));

  @media screen and (width > 64rem) {
    height: calc(2.5 * var(--font-step-5));
  }
}

h1 {
  position: relative;
  z-index: var(--title-stack-index);
}

/* todo: manage heights better across screen sizes*/
:where(svg[class^="mountain"]) {
  position: absolute;
  inset: 0;
  width: 100%;
}

.mountain-background {
  top: calc(var(--font-step-5) * 0.6);
  fill: var(--color-accent--light, var(--thistle-light));
}

.mountain-midground {
  height: 150px;
  top: calc(var(--font-step-5) * 1.2);
  fill: var(--color-accent);
}

.mountain-foreground {
  top: calc(var(--font-step-5) * 0.8);
  height: 250px;
  fill: var(--thistle-dark);
}

main {
  position: relative;
  /* go on top of mountains */
  z-index: var(--title-stack-index);
  padding-top: var(--space-l-xl);
  background-color: var(--color-white);
}

/* parallax */
@media screen and (prefers-reduced-motion: no-preference) {
  /* figure out height responsiveness later */
  @media screen and (height > 39rem) {
    /* support query and more on parallax technique: https://keithclark.co.uk/articles/practical-css-parallax/ */
    @supports (
      (perspective: 1px) and (not (-webkit-overflow-scrolling: touch))
    ) {
      .parallax {
        height: 100vh;
        overflow-x: hidden;
        overflow-y: auto;
        overscroll-behavior: contain;
        perspective: 1px;
        isolation: isolate; /* prevent descendent z-index from fighting with nav or footer*/
      }

      h1 {
        /*
        I wanted to nest mountains inside header, but then sticky behaviour doesn't take
        effect on Firefox. Seems related to spec implementation for perspective and further
        descendents: https://bugzilla.mozilla.org/show_bug.cgi?id=716524
        - tried with preserve-3d on header (maybe try with it on h1 too?)
      */
        position: sticky;
        top: var(--space-m); /* match block padding*/
      }

      :where(svg[class^="mountain"]):last-of-type {
        z-index: calc(var(--title-stack-index) + 1);
      }

      /* todo: manage heights better across screen sizes*/
      :where(svg[class^="mountain"]) {
        position: fixed;
      }

      .mountain-background {
        height: 100px;
        top: -550px;
        transform: translateZ(-2px);
        scale: 3;
      }

      .mountain-midground {
        top: -150px;
        transform: translateZ(-1px);
        scale: 2;
      }

      .mountain-foreground {
        top: -20px;
        transform: translateZ(0);
      }

      main {
        /* go on top of last mountain */
        z-index: calc(var(--title-stack-index) + 2);
      }

      @media screen and (width > 38rem) {
        .mountain-background {
          top: -400px;
          height: 200px;
        }

        .mountain-midground {
          top: -70px;
        }

        .mountain-foreground {
          top: 30px;
        }
      }

      @media screen and (width > 75rem) {
        .mountain-background {
          top: -300px;
          height: initial;
        }

        .mountain-midground {
          top: 30px;
        }

        .mountain-foreground {
          top: 100px;
        }
      }
    }
  }
}
/* end parallax effect */

@supports (display: grid) {
  main.u-grid {
    --grid-max-width: 100%;
    grid-template-columns:
      [full-width-start] minmax(0, 1fr) [content-start] fit-content(50ch)
      [content-end] minmax(0, 1fr) [full-width-end];
    column-gap: 0;
    row-gap: var(--space-s);

    :where(*:not(.u-full-width)) {
      grid-column: content;
    }

    /* panorama */
    & img.u-full-width {
      object-fit: cover;
    }

    .trip-summary,
    [data-day] {
      grid-column: full-width;
      display: grid;
      grid-template-columns: subgrid;
      grid-auto-flow: row dense;
      gap: var(--space-s);
    }
  }

  .u-float-left {
    float: left;
    margin-left: calc(var(--space-xl) * -1);
  }

  .u-full-width,
  picture:has(img.u-full-width),
  figure:has(img.u-full-width) {
    grid-column: full-width;
  }

  [data-day] {
    h2 {
      margin-block-end: var(--space-3xs);
    }

    .content {
      > *:not(:last-child) {
        margin-block-end: var(--space-s);
      }
    }
  }

  .trip-map {
    aspect-ratio: 4/3;
  }

  dl.u-grid {
    grid-template-columns: repeat(3, minmax(0, 1fr));
    grid-auto-flow: row dense;
    row-gap: 0;
    padding-block: var(--space-s);
    padding-inline: var(--space-m);
    background-color: var(--color-accent);

    ::selection {
      --color-accent: #ede1ea; /* todo: make variable */
    }

    > * {
      --grid-column-start: 1;
      grid-column: var(--grid-column-start, 1) / span 1;
    }

    > *:nth-child(n + 5) {
      --grid-column-start: 2;
    }

    > *:nth-child(n + 9) {
      --grid-column-start: 3;
    }

    dt {
      font-weight: 700;
    }

    dd:nth-of-type(odd) {
      margin-block-end: var(--space-s);
    }
  }

  @media screen and (90rem >= width > 37.5rem) {
    /* need to use layers */
    main.u-grid {
      --offset: var(--space-l);
      .trip-map {
        margin-inline-end: var(--offset);
      }
      .trip-stats {
        width: fit-content;
        position: relative;
        bottom: var(--offset);
        margin-inline-start: auto;
        margin-block-end: calc(-1 * var(--offset));
      }

      & [data-day] {
        grid-template-rows: auto [image-start] 1fr [overlap-start] var(--offset) [overlap-end] auto [stats-end] auto;

        .trip-map {
          grid-row: image-start / overlap-end;
        }

        .trip-stats {
          justify-self: end;
          grid-row: overlap-start / stats-end;
          position: unset;
          margin-inline-start: unset;
          margin-block-end: unset;
        }
      }
    }
  }

  @media screen and (width > 85rem) {
    main.u-grid {
      & [data-day] {
        grid-template-columns:
          1fr [map-start]
          15rem [content-start] 40rem [content-end] 15rem [stats-end]
          1fr;
        grid-template-rows: min-content 1fr;

        .trip-map {
          grid-column: map-start / content-start;
          grid-row: 1 / -1;
        }

        .trip-stats {
          grid-column: content-end / stats-end;
          grid-row-start: 2;
        }
      }
    }
  }
}
