@layer template {
  main {
    --column-gutter: 0;
    --row-gutter: var(--space-s);
    --grid-template-columns: minmax(0, 1fr) [content-start] fit-content(50ch)
      [content-end] minmax(0, 1fr);

    > *,
    .u-layout-subgrid > * {
      grid-column: content;
    }
  }

  [data-trip-content] {
    --gutter: var(--space-s);
  }
}

/* Mountain Header  */
@layer component {
  :root {
    --title-stack-index: 1;
  }

  header {
    height: calc(3 * var(--font-step-5));

    @media screen and (width > 64rem) {
      height: calc(2.5 * var(--font-step-5));
    }
  }

  h1 {
    position: relative;
    z-index: var(--title-stack-index);
  }

  /* todo: manage heights better across screen sizes*/
  :where(svg[class^="mountain"]) {
    position: absolute;
    inset: 0;
    width: 100%;
  }

  .mountain-background {
    top: calc(var(--font-step-5) * 0.6);
    fill: var(--color-accent-light);
  }

  .mountain-midground {
    height: 150px;
    top: calc(var(--font-step-5) * 1.2);
    fill: var(--color-accent);
  }

  .mountain-foreground {
    top: calc(var(--font-step-5) * 0.8);
    height: 250px;
    fill: var(--color-accent-dark);
  }

  main {
    --max-width: 100%;
    position: relative;
    /* go on top of mountains */
    z-index: var(--title-stack-index);
    padding-top: var(--space-l-xl);
    background-color: var(--color-neutral-light);
  }
}

/* Mountain Header: Parallax */
@media screen and (prefers-reduced-motion: no-preference) {
  /* figure out height responsiveness later */
  @media screen and (height > 39rem) {
    /* support query and more on parallax technique: https://keithclark.co.uk/articles/practical-css-parallax/ */
    @supports (
      (perspective: 1px) and (not (-webkit-overflow-scrolling: touch))
    ) {
      @layer variant {
        .parallax {
          height: 100vh;
          overflow-x: hidden;
          overflow-y: auto;
          overscroll-behavior: contain;
          perspective: 1px;
          isolation: isolate; /* prevent descendent z-index from fighting with nav or footer*/
        }

        h1 {
          /*
          I wanted to nest mountains inside header, but then sticky behaviour doesn't take
          effect on Firefox. Seems related to spec implementation for perspective and further
          descendents: https://bugzilla.mozilla.org/show_bug.cgi?id=716524
          - tried with preserve-3d on header (maybe try with it on h1 too?)
        */
          position: sticky;
          top: var(--space-m); /* match block padding*/
        }

        :where(svg[class^="mountain"]):last-of-type {
          z-index: calc(var(--title-stack-index) + 1);
        }

        /* todo: manage heights better across screen sizes*/
        :where(svg[class^="mountain"]) {
          position: fixed;
        }

        .mountain-background {
          height: 100px;
          top: -550px;
          transform: translateZ(-2px);
          scale: 3;
        }

        .mountain-midground {
          top: -150px;
          transform: translateZ(-1px);
          scale: 2;
        }

        .mountain-foreground {
          top: -20px;
          transform: translateZ(0);
        }

        main {
          /* go on top of last mountain */
          z-index: calc(var(--title-stack-index) + 2);
        }

        @media screen and (width > 38rem) {
          .mountain-background {
            top: -400px;
            height: 200px;
          }

          .mountain-midground {
            top: -70px;
          }

          .mountain-foreground {
            top: 30px;
          }
        }

        @media screen and (width > 75rem) {
          .mountain-background {
            top: -300px;
            height: initial;
          }

          .mountain-midground {
            top: 30px;
          }

          .mountain-foreground {
            top: 100px;
          }
        }
      }
    }
  }
}

/* Trip */
@layer component {
  [data-trip-content] {
    .map {
      aspect-ratio: 4/3;
      background-color: gainsboro;
    }

    .stats {
      --color-selection-background: var(--color-accent-light);
      padding-block: var(--space-s);
      padding-inline: var(--space-m);
      background-color: var(--color-accent);

      dt {
        font-weight: 700;
      }
    }
  }
}

/* Trip: Summary */
@layer variant {
  [data-trip-content="summary"] .u-layout-stack {
    > p:first-of-type {
      font-size: var(--font-step-1);
      line-height: 1.4;

      &::first-line {
        font-variant-caps: petite-caps;
        font-weight: 700;
      }

      @media screen and (width > 37.5rem) {
        &::first-letter {
          float: left;
          /* logical properties don't seem to work here */
          /* chrome not recognizing font step definition */
          margin-left: calc(-0.33 * var(--font-step-5));
          font-size: var(--font-step-5);
          letter-spacing: 0.05em;
          line-height: 1;
        }
      }

      @media screen and (width > 56rem) {
        line-height: unset;

        ::first-letter {
          margin-top: unset;
        }
      }
    }
  }
}
