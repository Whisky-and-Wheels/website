@layer template {
  /* note: main is max-width 100% to allow white background / mountain svg overlap */
  .u-layout-grid {
    --gutter: var(--space-s);
    --max-line-length: fit-content(50ch);
    --grid-template-columns: minmax(0, 1fr) [content-start]
      var(--max-line-length) [content-end] minmax(0, 1fr);
  }

  .u-layout-grid > * {
    grid-column: content;
  }

  @media screen and (28rem < width <= 78rem) {
    [data-trip-content] {
      --offset: var(--space-l);
    }
    .map {
      width: calc(100% - var(--offset));
    }

    .stats-container {
      margin-block-end: calc(-1 * var(--offset));
      position: relative;
      bottom: var(--offset);
    }

    .stats {
      width: fit-content;
      margin-inline-start: auto;
    }
  }

  @media screen and (width > 78rem) {
    .u-layout-grid {
      --gutter: var(--space-l);
      --grid-template-columns: 1fr [content-start] var(--max-line-length)
        [content-end] 20ch [stats-end] 1fr;

      .stats-container {
        grid-column: content-end / stats-end;
        grid-row: 2 / span 2;
        position: sticky;
        top: var(--gutter);
        align-self: start;
      }

      &[data-trip-content="summary"] {
        .stats-container {
          grid-row-start: 1;
        }
      }
    }

    /* okay for proof-of-concept, needs a lot of finesse */
    /* sticky positioning gets weird */
    /* timing very rough */
    /* tried animating grid-column but */
    /* @supports (animation-timeline: view(block)) {
      .animate-slide-shrink {
        animation-name: slide-shrink;
        animation-duration: auto;
        animation-timeline: view(block);
      }

      [data-trip-content]:nth-of-type(n + 2) {
        .map {
          display: none;
        }
      }

      @keyframes slide-shrink {
        0% {
          transform: translateX(0), scale(1);
        }
        50% {
          transform-origin: bottom right;
          transform: translateX(-100%), scale(1);
        }
        99% {
          transform-origin: bottom right;
          transform: translateX(-100%) scale(0.5);
        }
        100% {
          position: sticky;
          top: 0;
        }
      }
    } */
  }
}

/* Mountain Header  */
@layer component {
  :root {
    --title-stack-index: 1;
  }

  [class^="mountain"] ~ header {
    height: calc(3 * var(--font-step-5));

    @media screen and (width > 64rem) {
      height: calc(2.5 * var(--font-step-5));
    }
  }

  h1 {
    position: relative;
    z-index: var(--title-stack-index);
  }

  /* todo: manage heights better across screen sizes*/
  :where(svg[class^="mountain"]) {
    position: absolute;
    inset: 0;
    width: 100%;
  }

  .mountain-background {
    top: calc(var(--font-step-5) * 0.6);
    fill: var(--color-accent-light);
  }

  .mountain-midground {
    height: 150px;
    top: calc(var(--font-step-5) * 1.2);
    fill: var(--color-accent);
  }

  .mountain-foreground {
    top: calc(var(--font-step-5) * 0.8);
    height: 250px;
    fill: var(--color-accent-dark);
  }

  main {
    --max-width: 100%;
    position: relative;
    /* go on top of mountains */
    z-index: var(--title-stack-index);
    padding-top: var(--space-l-xl);
    background-color: var(--color-neutral-light);
  }
}

/* Mountain Header: Parallax */
@media screen and (prefers-reduced-motion: no-preference) {
  /* figure out height responsiveness later */
  @media screen and (height > 39rem) {
    /* support query and more on parallax technique: https://keithclark.co.uk/articles/practical-css-parallax/ */
    @supports (
      (perspective: 1px) and (not (-webkit-overflow-scrolling: touch))
    ) {
      @layer variant {
        .parallax {
          height: 100vh;
          overflow-x: hidden;
          overflow-y: auto;
          overscroll-behavior: contain;
          perspective: 1px;
          isolation: isolate; /* prevent descendent z-index from fighting with nav or footer*/
        }

        h1 {
          /*
          I wanted to nest mountains inside header, but then sticky behaviour doesn't take
          effect on Firefox. Seems related to spec implementation for perspective and further
          descendents: https://bugzilla.mozilla.org/show_bug.cgi?id=716524
          - tried with preserve-3d on header (maybe try with it on h1 too?)
        */
          position: sticky;
          top: var(--space-m); /* match block padding*/
        }

        :where(svg[class^="mountain"]):last-of-type {
          z-index: calc(var(--title-stack-index) + 1);
        }

        /* todo: manage heights better across screen sizes*/
        :where(svg[class^="mountain"]) {
          position: fixed;
        }

        .mountain-background {
          height: 100px;
          top: -550px;
          transform: translateZ(-2px);
          scale: 3;
        }

        .mountain-midground {
          top: -150px;
          transform: translateZ(-1px);
          scale: 2;
        }

        .mountain-foreground {
          top: -20px;
          transform: translateZ(0);
        }

        main {
          /* go on top of last mountain */
          z-index: calc(var(--title-stack-index) + 2);
        }

        @media screen and (width > 38rem) {
          .mountain-background {
            top: -400px;
            height: 200px;
          }

          .mountain-midground {
            top: -70px;
          }

          .mountain-foreground {
            top: 30px;
          }
        }

        @media screen and (width > 75rem) {
          .mountain-background {
            top: -300px;
            height: initial;
          }

          .mountain-midground {
            top: 30px;
          }

          .mountain-foreground {
            top: 100px;
          }
        }
      }
    }
  }
}

/* maybe split out stats and map styling to separate components? */
/* Trip (Stack, Stats, Map) */
@layer component {
  [data-trip-content] {
    .iframe-container {
      width: 100%;
      position: relative;
      overflow: hidden;
      aspect-ratio: 4/3;

      & iframe {
        position: absolute;
        inset: 0;
        width: 100%;
        height: 100%;
      }
    }

    .stats-container {
      container: stats / inline-size;
    }

    /* todo: add elevation profile svg in after element with accent color */
    .stats {
      width: 100%;
      padding-block: var(--space-xs);
      padding-inline: var(--space-s);
      background-color: var(--color-accent-light);

      & th {
        display: block;
        width: max-content;
        border-inline-end: var(--space-xs) solid transparent;
        text-align: left;
      }

      @container stats (width > 20rem) {
        & tbody {
          display: grid;
          grid-template-columns: repeat(var(--nb-columns, 2), auto);
          row-gap: var(--space-xs);
        }

        & tr {
          display: flex;
          flex-direction: column;
        }
      }

      @container stats (width > 28rem) {
        & tbody {
          --nb-columns: 3;
        }
      }

      @container stats (width > 34rem) {
        & tbody {
          --nb-columns: 6;
        }
      }
    }
  }
}

/* Trip: Summary (Intro Paragraph) */
@layer variant {
  [data-trip-content="summary"] .u-layout-stack {
    > p:first-of-type {
      font-size: var(--font-step-1);
      line-height: 1.4;

      &::first-line {
        font-variant-caps: petite-caps;
        font-weight: 700;
      }

      /* todo: manage RTL styling */
      @media screen and (width > 37.5rem) {
        &::first-letter {
          float: left;
          /* logical properties don't seem to work here */
          /* chrome not recognizing font step definition */
          margin-left: calc(-0.33 * var(--font-step-5));
          font-size: var(--font-step-5);
          letter-spacing: 0.05em;
          line-height: 1;
        }
      }

      @media screen and (width > 56rem) {
        line-height: unset;

        ::first-letter {
          margin-top: unset;
        }
      }
    }
  }
}
